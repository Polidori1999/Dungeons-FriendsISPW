@startuml
actor Utente
boundary LobbyBoundary <<Boundary>>
boundary NotificationBoundary <<Boundary>>
control LobbyController <<Control, Singleton>>
entity Lobby <<Entity, State>>
entity Participant <<Entity, Observer>>
entity LobbyFactory <<Factory>>
entity FilterStrategy <<Strategy>>
entity LobbyDAO <<DAO>>
entity NotificationDAO <<DAO>>

Utente -> LobbyBoundary : setFilters(filters)
activate LobbyBoundary
LobbyBoundary -> LobbyController : filterLobbies(filters)
activate LobbyController
LobbyController -> FilterStrategy : selectStrategy(filters)
activate FilterStrategy
FilterStrategy --> LobbyController : Return selected strategy
deactivate FilterStrategy
LobbyController -> LobbyFactory : createFilters(strategy)
activate LobbyFactory
LobbyFactory --> LobbyController : Return filters
deactivate LobbyFactory
LobbyController -> LobbyDAO : getCompatibleLobbies(filters)
activate LobbyDAO
LobbyDAO --> LobbyController : Return compatible lobbies
deactivate LobbyDAO
LobbyController --> LobbyBoundary : displayLobbyList(lobbies)
deactivate LobbyController
deactivate LobbyBoundary


Utente -> LobbyBoundary : Seleziona lobby e clicca "Join"
activate LobbyBoundary
LobbyBoundary -> LobbyController : joinLobby(lobbyId)
activate LobbyController
LobbyController -> LobbyDAO : fetchLobby(lobbyId)
activate LobbyDAO
LobbyDAO --> LobbyController : Return lobby instance
deactivate LobbyDAO
LobbyController -> Lobby : addParticipant(userId)
activate Lobby
Lobby --> LobbyController : Return join confirmation
deactivate Lobby
LobbyController --> NotificationDAO : logNotification("Join successful")
activate NotificationDAO
NotificationDAO --> LobbyController : Notification logged
deactivate NotificationDAO
LobbyController --> LobbyBoundary : notifySuccess("Join successful")
deactivate LobbyController
deactivate LobbyBoundary


activate Lobby
Lobby -> Participant : notifyObservers(notification) (Asynchronous)
deactivate Lobby
activate Participant
Participant --> Lobby : update(notification)
deactivate Participant


Utente -> LobbyBoundary : Seleziona "Abbandona lobby"
activate LobbyBoundary
LobbyBoundary -> LobbyController : leaveLobby(lobbyId)
activate LobbyController
LobbyController -> LobbyDAO : fetchLobby(lobbyId)
activate LobbyDAO
LobbyDAO --> LobbyController : Return lobby instance
deactivate LobbyDAO
LobbyController -> Lobby : removeParticipant(userId)
activate Lobby
Lobby --> LobbyController : Return leave confirmation
deactivate Lobby
LobbyController --> NotificationDAO : logNotification("Left successfully")
activate NotificationDAO
NotificationDAO --> LobbyController : Notification logged
deactivate NotificationDAO
LobbyController --> LobbyBoundary : notifySuccess("Left successfully")
deactivate LobbyController
deactivate LobbyBoundary


LobbyController -> LobbyController : getInstance() (Singleton)
@enduml
